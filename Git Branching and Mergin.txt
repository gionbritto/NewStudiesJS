https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging
Example:
1 - Do some work on a website.
2 - Create a branch for a new user story you’re working on.
3 - Do some work in that branch.

Now you'll need a new hotfix: 
1 - Switch to your production branch.
2 - Create a branch to add the hotfix.
3 - After it’s tested, merge the hotfix branch, and push to production.
4 - Switch back to your original user story and continue working.

To create a new branch and switch to it at the same time, you can run the git checkout command with the -b switch:
command: git checkout -b iss53 
response: Switched to a new branch "iss53"
This is shorthand for:
$ git branch iss53
$ git checkout iss53

You do your stuffs and some commits. With it moves that branch foward, because you have it checkedout:
$ vim index.html
$ git commit -a -m 'Create new footer [issue 53]'

---------------
Let’s think you received a call and have another issue and need to fix it immediately. 
Let’s assume you’ve committed all your changes, so you can switch back to your master branch:
$ git checkout master
Switched to branch 'master'
--

At this point, your project working directory is exactly the way it was before you started working on issue #53, 
and you can concentrate on your hotfix. This is an important point to remember: 
when you switch branches, Git resets your working directory to look like it did the last time you committed on 
that branch. It adds, removes, and modifies files automatically to make sure your working copy is what the branch
looked like on your last commit to it.

Next, you have a hotfix to make. Let’s create a hotfix branch on which to work until it’s completed:
$ git checkout -b hotfix
Switched to a new branch 'hotfix'
$ vim index.html
$ git commit -a -m 'Fix broken email address'
[hotfix 1fb7853] Fix broken email address
 1 file changed, 2 insertions(+)
--

 You can run your tests, make sure the hotfix is what you want, and finally merge the hotfix branch back into your master branch to deploy to production. 
 You do this with the git merge command:
$ git checkout master
$ git merge hotfix
Updating f42c576..3a0874c
Fast-forward
 index.html | 2 ++
 1 file changed, 2 insertions(+)
--

After your super-important fix is deployed, you’re ready to switch back to the work you were doing before 
you were interrupted. However, first you’ll delete the hotfix branch, because you no longer need it 
— the master branch points at the same place. You can delete it with the -d option to git branch:
$ git branch -d hotfix
Deleted branch hotfix (3a0874c).
--

Now you can switch back to your work-in-progress branch on issue #53 and continue working on it.

$ git checkout iss53
Switched to branch "iss53"
$ vim index.html
$ git commit -a -m 'Finish the new footer [issue 53]'
[iss53 ad82d7a] Finish the new footer [issue 53]
1 file changed, 1 insertion(+)
--

Basic Merging
Suppose you’ve decided that your issue #53 work is complete and ready to be merged into your master branch. 
In order to do that, you’ll merge your iss53 branch into master, much like you merged your hotfix branch earlier. 
All you have to do is check out the branch you wish to merge into and then run the git merge command:

$ git checkout master
Switched to branch 'master'
$ git merge iss53
Merge made by the 'recursive' strategy.
index.html |    1 +
1 file changed, 1 insertion(+)
--

Now that your work is merged in, you have no further need for the iss53 branch. 
You can close the issue in your issue-tracking system, and delete the branch:
$ git branch -d iss53
--

Basic Merge Conflicts
If you want to see which files are unmerged at any point after a merge conflict, you can run git status:
$ git status
On branch master
You have unmerged paths.
  (fix conflicts and run "git commit")

Unmerged paths:
  (use "git add <file>..." to mark resolution)

    both modified:      index.html

no changes added to commit (use "git add" and/or "git commit -a")
--

Anything that has merge conflicts and hasn’t been resolved is listed as unmerged. 
Git adds standard conflict-resolution markers to the files that have conflicts, 
so you can open them manually and resolve those conflicts. 
Your file contains a section that looks something like this:

<<<<<<< HEAD:index.html
<div id="footer">contact : email.support@github.com</div>
=======
<div id="footer">
 please contact us at support@github.com
</div>
>>>>>>> iss53:index.html
--

After you’ve resolved each of these sections in each conflicted file, run git add on each file to mark it as 
resolved. Staging the file marks it as resolved in Git.

If you want to use a graphical tool to resolve these issues, you can run git mergetool, which fires up an appropriate visual merge tool and walks you through the conflicts:
$ git mergetool

This message is displayed because 'merge.tool' is not configured.
See 'git mergetool --tool-help' or 'git help config' for more details.
'git mergetool' will now attempt to use one of the following tools:
opendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc3 codecompare vimdiff emerge
Merging:
index.html

Normal merge conflict for 'index.html':
  {local}: modified file
  {remote}: modified file
Hit return to start merge resolution tool (opendiff):
-----------

After you exit the merge tool, Git asks you if the merge was successful. 
If you tell the script that it was, it stages the file to mark it as resolved for you. 
You can run git status again to verify that all conflicts have been resolved:

$ git status
On branch master
All conflicts fixed but you are still merging.
  (use "git commit" to conclude merge)

Changes to be committed:
    modified:   index.html
--

If you’re happy with that, and you verify that everything that had conflicts has been staged, you can type git commit to finalize the merge commit. The commit message by default looks something like this:

Merge branch 'iss53'

Conflicts:
    index.html
#
# It looks like you may be committing a merge.
# If this is not correct, please remove the file
#	.git/MERGE_HEAD
# and try again.


# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# All conflicts fixed but you are still merging.
#
# Changes to be committed:
#	modified:   index.html
#

If you think it would be helpful to others looking at this merge in the future, you can modify this 
commit message with details 
about how you resolved the merge and explain why you did the changes you made if these are not obvious.